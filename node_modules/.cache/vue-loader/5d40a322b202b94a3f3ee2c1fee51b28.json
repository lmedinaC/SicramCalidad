{"remainingRequest":"C:\\Users\\usser\\Desktop\\Nueva carpeta (2)\\proyect\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\usser\\Desktop\\Nueva carpeta (2)\\proyect\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\usser\\Desktop\\Nueva carpeta (2)\\proyect\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\usser\\Desktop\\Nueva carpeta (2)\\proyect\\src\\components\\FormDoc.vue?vue&type=template&id=334a7c58&scoped=true&","dependencies":[{"path":"C:\\Users\\usser\\Desktop\\Nueva carpeta (2)\\proyect\\src\\components\\FormDoc.vue","mtime":1594758184410},{"path":"C:\\Users\\usser\\Desktop\\Nueva carpeta (2)\\proyect\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\usser\\Desktop\\Nueva carpeta (2)\\proyect\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\usser\\Desktop\\Nueva carpeta (2)\\proyect\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\usser\\Desktop\\Nueva carpeta (2)\\proyect\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}