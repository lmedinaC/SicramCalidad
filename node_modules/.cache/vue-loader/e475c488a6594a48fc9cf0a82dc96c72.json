{"remainingRequest":"C:\\Users\\usser\\Desktop\\ProyectoDefinitivo\\proyect\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\usser\\Desktop\\ProyectoDefinitivo\\proyect\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\usser\\Desktop\\ProyectoDefinitivo\\proyect\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\usser\\Desktop\\ProyectoDefinitivo\\proyect\\src\\components\\Slider.vue?vue&type=template&id=2dedc691&scoped=true&","dependencies":[{"path":"C:\\Users\\usser\\Desktop\\ProyectoDefinitivo\\proyect\\src\\components\\Slider.vue","mtime":1593635623857},{"path":"C:\\Users\\usser\\Desktop\\ProyectoDefinitivo\\proyect\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\usser\\Desktop\\ProyectoDefinitivo\\proyect\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\usser\\Desktop\\ProyectoDefinitivo\\proyect\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\usser\\Desktop\\ProyectoDefinitivo\\proyect\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}